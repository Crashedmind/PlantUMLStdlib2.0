@startuml
'all sprites in a category would be included in an all.puml file for that category
'==================================================================================================




' Colors
' ##################################
!define AWS_COLOR #232F3E
!define AWS_BG_COLOR #FFFFFF
!define AWS_BORDER_COLOR #FF9900
!define AWS_SYMBOL_COLOR AWS_COLOR

' Styling
' ##################################

!define TECHN_FONT_SIZE 12

skinparam defaultTextAlignment center

skinparam wrapWidth 200
skinparam maxMessageSize 150

skinparam rectangle {
    StereotypeFontSize 12
}

skinparam Arrow {
    Color #666666
    FontColor #666666
    FontSize 12
}

!definelong AWSEntityColoring(stereo)
skinparam rectangle<<stereo>> {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
skinparam participant<<stereo>> {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
!enddefinelong

' Layout
' ##################################

!definelong LAYOUT_AS_SKETCH
skinparam backgroundColor #EEEBDC
skinparam handwritten true
skinparam defaultFontName "Comic Sans MS"
center footer <font color=red>Warning:</font> Created for discussion, needs to be validated
!enddefinelong

!define LAYOUT_TOP_DOWN top to bottom direction
!define LAYOUT_LEFT_RIGHT left to right direction


'create equivalent of icons shown here https://github.com/awslabs/aws-icons-for-plantuml
sprite $Batch [64x64/16z] {
xLQ7bjim30CdzFzVtEV1iErPkJpT7iYm5aWDKERujFZ5Bp8YkSvM011VfMzSDy2Mw1JidbCGAtmllmbPuIkoImjyGUsyBV4LV95_Xny50bpW4uTRAjOKu81b
Xa0vbX3OKFG5C0IMNLyxXA_3PvW5hqHSOFBP_Ovk4036hYi0pJdTCgqD6A0g4FQ0hOwygxSikGOanw11AuvtomxXjNiRDECmn21xxTkJP0N4tdy1Gmu5T2GW
6ygFL_sqbx3NvA_FVtt_ri_F1CZNra-10TpNhvVr2KGcyVCOdoBySlpv-jC1ZSVveO36_Fwb0UASqGqG0QpfJgP2Eo60u59-fLVozhhdNk2WTeDpq2O6AAL_
uV7KGPNO2lya17gz1pMiD1VmFNH9IBLNe3xA3q07eNsMy_WdXESwU4jRmddEk-FUuPFjjthiqAEGVUz8rlqmsK1nhtYlklvp7vWRfka0jUNITUdTzgxFyzLx
-Ikh_YdmYr_y0G
}

'https://github.com/awslabs/aws-icons-for-plantuml/blob/master/dist/ARVR/ARVR.puml
sprite $Arvr [64x64/16z] {
xTG3WiH054NHzutP_th7RHkfsmnEdE1HZMZsIn0_DGDuuVsZJwnMVJ-57txuuKrsP4Tv1mjl3Nw43qZlo147VO9xPueyu8j1l3jm7V0GtPFWe8_UKzpL3rzc
TO4l0gZEzufCsDd-rnhoN2zKtKLoWk-bkHq--vabr0TypEy_WiwEmc9K7FATAd_fVDwOZygdU_uEF_pmLgUMA_wChkV1SavCc4LdXNVe2m
}

'https://github.com/awslabs/aws-icons-for-plantuml/blob/master/dist/ARVR/Sumerian.puml
sprite $Sumerian [64x64/16z] {
xPO5qkim38HN3FU_xuE29mMx-Hbtg4to6GIZxVVJhtvLLI-XbK2QJo6sVv90JA3SImUJRVuAjBeDl8zE0G2EyVy42d87NGOmGG0vVHuu7iRWZt4daBUWWW6j
8w_zNufuHES9KgxpKjr5o6CKQyh5uGi59BTfEuR1GHvEi6cu0N2sWE8sb99j03370L41CkryG9FQh6rTffOJlEWGLz-cbv5N4Pqh83Vf5THL67BA-qXltEu_
2XWrtrzlzZUfwuBCdjy_3ilGeY0Pgmj0NO5ehtb1vh9c0OhsaV_Qfa_hKUzKUDIs_eJgy7myMFEPLzinwd3nSQ0rpwYR_kiWmAgVmezmYuKSJ_94VZJDABad
y4EnAVcdyy4Xo6H_7g-02Se1oIVprMqKX_YdW9_AEtjtdVlNiykVmAS0Tjd_1exTl8wS3Ju5q5sydGux-94Dty4xGtfeyAEewG4FQCvv0vQy0b8zvuiN_EYw
AHy0nu8Ue-gMJrFBOgjTKr_pYfyChlaOjDhmay6vj0xaWvyFxdKOyiYlZSFQGGZIVMbSrhaa46WOf-dmcOS1a3mPjp9mFqqf77FZ-7JZ-Y76UQvV_Uel
}




'=============================DECORATORS==================================
' We define 1 or more sprite decorators in stdlib
' Define our decorators that we know now - and can easily define new ones in future with as manty new parameters 
' as we want, that we don't even know about yet
' Let's say SpriteDecorator is defined month 1, SpriteDecorator2 is defined month 2, SpriteDecorator3 is defined month 3
'---------------------------------------------------
!unquoted procedure $SpriteDecorator($MySprite, $alias, $description="", $label="", $technology="", $scale=1, $colour="red", $focus="normal")

' https://plantuml.com/preprocessing Conditions to show technology "[ ]" only if technology specified
'""== $label\n": "==" is creole syntax for "Large heading" https://plantuml.com/creole
' rectangle $alias <<$alias>> is in form "shape alias <<stereo>>" where skinparam can be specified for a stereo per https://plantuml.com/skinparam last example

!if ($focus == "hi")
    skinparam rectangle {
        backgroundColor<<$alias>> yellow
        borderColor<<$alias>> yellow
    }
!else 

    !if  ($focus == "lo")
        skinparam rectangle {
            backgroundColor<<$alias>> lightgrey
            borderColor<<$alias>> lightgrey
        }

!endif

!if ($technology == "")
    rectangle $alias <<$alias>> as "
    == $label\n 
    <color:$colour><$MySprite*$scale></color>

    $description"
!else
    rectangle $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    //<size:12>[$technology]</size>//

  $description"
!endif

!endprocedure

'add a new shape parameter
'---------------------------------------------------
!unquoted procedure $SpriteDecorator2($MySprite, $alias, $description="", $label="", $technology="", $scale=1, $colour="green", $shape="node")

!if ($focus == "hi")
    skinparam rectangle {
        backgroundColor<<$alias>> yellow
        borderColor<<$alias>> yellow
    }
!else 

    !if  ($focus == "lo")
        skinparam rectangle {
            backgroundColor<<$alias>> lightgrey
            borderColor<<$alias>> lightgrey
        }

!endif


!if ($technology == "")
' https://plantuml.com/preprocessing Conditions to show technology "[ ]" only if technology specified
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    $description"
!else
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    //<size:12>[$technology]</size>//

  $description"
!endif

!endprocedure



'add a new shape parameter + a textsize parameter
'---------------------------------------------------
!unquoted procedure $SpriteDecorator3($MySprite, $alias, $description="", $label="", $technology="", $scale=1, $colour="blue", $shape="cloud", $textsize="18")

!if ($focus == "hi")
    skinparam rectangle {
        backgroundColor<<$alias>> yellow
        borderColor<<$alias>> yellow
    }
!else 

    !if  ($focus == "lo")
        skinparam rectangle {
            backgroundColor<<$alias>> lightgrey
            borderColor<<$alias>> lightgrey
        }

!endif


!if ($technology == "")
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>

    $description "
!else 
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    //<size:$textsize>[$technology]</size>//

    $description "
!endif

!endprocedure



'add a new shape parameter + a textsize parameter + add a function as parameter
'-------------------------------------------------------------------------------
!unquoted procedure $SpriteDecorator4($MySprite, $alias, $description="", $label="", $technology="", $scale=1, $colour="blue", $shape="cloud", $textsize="18", $function="", $highlight="")

!if ($focus == "hi")
    skinparam rectangle {
        backgroundColor<<$alias>> yellow
        borderColor<<$alias>> yellow
    }
!else 

    !if  ($focus == "lo")
        skinparam rectangle {
            backgroundColor<<$alias>> lightgrey
            borderColor<<$alias>> lightgrey
        }

!endif


!if ($technology == "")
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>

    $description " 
!else 
    $shape $alias <<$alias>> as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    //<size:$textsize>[$technology]</size>//

    $description "
!endif

!endprocedure



'add a new shape parameter + a textsize parameter + add a function as parameter
'-------------------------------------------------------------------------------
!unquoted procedure $SpriteDecorator4($MySprite, $alias, $description="", $label="", $technology="", $scale=1, $colour="blue", $shape="cloud", $textsize="18", highlight="")

'!if ($highlight == "highlight")
    skinparam $shape {
    backgroundColor<<$alias>> Yellow
    }
'!endif

!if ($technology == "")
    $shape $alias as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>

    $description "
!else 
    $shape $alias as "
    == $label\n
    <color:$colour><$MySprite*$scale></color>
    //<size:$textsize>[$technology]</size>//

    $description "
!endif

!endprocedure


' test STATIC call of decorators with same icon
'---------------------------------------------------
$SpriteDecorator("$Batch", "static_dec1")
$SpriteDecorator2("$Batch", "static_dec2", $shape="node")
$SpriteDecorator3("$Batch", "static_dec3", $shape="cloud", $textsize="20")
$SpriteDecorator4("$Batch", "static_dec4", $shape="cloud", $textsize="20", $highlight="highlight")


' test DYNAMIC call of decorators with same icon
'---------------------------------------------------
'this does not work directly as $SpriteDecorator - so we do indirect as per following line
!$dyn = "$Sprite"+ "Decorator"
%invoke_procedure($dyn, "$Batch", "dynamic_dec1", "description", "label", "technology")

!$dyn2 = "$Sprite"+ "Decorator2"
%invoke_procedure($dyn2, "$Batch", "dynamic_dec2")

!$dyn3 = "$Sprite"+ "Decorator3"
%invoke_procedure($dyn3, "$Batch", "dynamic_dec3")


'=============================END DECORATORS==================================



!procedure $highlight_on($stereo)
    skinparam rectangle {
        backgroundColor<<$stereo>> yellow
        borderColor<<$stereo>> yellow
    }
    skinparam cloud {
        backgroundColor<<$stereo>> yellow
        borderColor<<$stereo>> yellow
    }    
    skinparam node {
        backgroundColor<<$stereo>> yellow
        borderColor<<$stereo>> yellow
    }        
!endprocedure




skinparam rectangle {
'borderColor Green
backgroundColor white
backgroundColor<<highlight>> Yellow
backgroundColor<<external>> Grey
}


' The beauty here is that for a given icon, we can change a given macro upwards (but not downwards)
' e.g. can change BATCH_DYN invoked prodedure from $dyn, to $dyn2, to $dyn3 etc...  this gives: 
' future proofing: user's code stays the same, but support for new params can be added
' ability to easily change the default decoration 
!unquoted procedure $BATCH_DYN($alias, $description="", $label="", $technology="", $scale=1, $colour="red")
%invoke_procedure($dyn, "$Batch", $alias, $description, $label, $technology, $scale, $colour)
!endprocedure

!unquoted procedure $ARVR_DYN( $alias, $description="", $label="", $technology="", $scale=1, $colour="green", $shape="node")
%invoke_procedure($dyn2, "$Arvr", $alias, $description, $label, $technology, $scale, $colour, $shape)
!endprocedure

!unquoted procedure $SUMERIAN_DYN($alias, $description="", $label="", $technology="", $scale=1, $colour="blue", $shape="cloud", $textsize="30", $focus="")
%invoke_procedure($dyn3, "$Sumerian", $alias, $description, $label, $technology, $scale, $colour, $shape, $textsize)
!endprocedure


' User can specify what they want in order, or via named arugments

$BATCH_DYN("alias", "description", "label", "technology", 1)
$BATCH_DYN("batch_dyn_2", "desc", "label", "tech", 2, "brown")

'$highlight_on("batch_dyn_3")

$BATCH_DYN("batch_dyn_3", $scale=4)

$ARVR_DYN( "arvr_dyn_1")

$ARVR_DYN("arvr_dyn_2", "descsdfsdf", "label", "tech")
$ARVR_DYN( "arvr_dyn_3", $technology="mytech")

'$highlight_on("sumerian_dyn_1")
$SUMERIAN_DYN("sumerian_dyn_1", "descsdfsdf", "label", "tech")
$SUMERIAN_DYN("sumerian_dyn_2", "descsdfsdf", "label", "tech", 0.5, "pink", "node", 30, $focus="hi")

footer %filename() rendered with PlantUML version %version()

@enduml